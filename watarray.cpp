/* Generated by Cython 0.17 on Tue Sep 18 11:01:11 2012 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define PyIndex_Check(o)     (PyNumber_Check(o) && !PyFloat_Check(o) && !PyComplex_Check(o))
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__watarray
#define __PYX_HAVE_API__watarray
#include "stdlib.h"
#include "stdint.h"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "string.h"
#include <string>
#include <ostream>
#include <istream>
#include <wat_array/wat_array.hpp>
#include "io.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))

#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "watarray.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_8watarray_WatArray;
struct __pyx_obj_8watarray_BitArray;

/* "watarray.pyx":14
 * NOTFOUND = <uint64_t> cpp_watarray.NOTFOUND
 * 
 * cdef class WatArray:             # <<<<<<<<<<<<<<
 *     cdef cpp_watarray.WatArray *thisptr
 *     def __cinit__(self):
 */
struct __pyx_obj_8watarray_WatArray {
  PyObject_HEAD
  struct __pyx_vtabstruct_8watarray_WatArray *__pyx_vtab;
  wat_array::WatArray *thisptr;
};


/* "watarray.pyx":114
 * 
 * 
 * cdef class BitArray:             # <<<<<<<<<<<<<<
 *     cdef cpp_watarray.BitArray *thisptr
 *     def __cinit__(self, uint64_t size = 0):
 */
struct __pyx_obj_8watarray_BitArray {
  PyObject_HEAD
  wat_array::BitArray *thisptr;
};



/* "watarray.pyx":14
 * NOTFOUND = <uint64_t> cpp_watarray.NOTFOUND
 * 
 * cdef class WatArray:             # <<<<<<<<<<<<<<
 *     cdef cpp_watarray.WatArray *thisptr
 *     def __cinit__(self):
 */

struct __pyx_vtabstruct_8watarray_WatArray {
  PyObject *(*_Init)(struct __pyx_obj_8watarray_WatArray *, PyObject *);
  PyObject *(*_ListRange)(struct __pyx_obj_8watarray_WatArray *, std::vector<wat_array::ListResult> &);
};
static struct __pyx_vtabstruct_8watarray_WatArray *__pyx_vtabptr_8watarray_WatArray;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uint64_t(uint64_t);

static CYTHON_INLINE uint64_t __Pyx_PyInt_from_py_uint64_t(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'cpp_watarray' */

/* Module declarations from 'watarray' */
static PyTypeObject *__pyx_ptype_8watarray_WatArray = 0;
static PyTypeObject *__pyx_ptype_8watarray_BitArray = 0;
#define __Pyx_MODULE_NAME "watarray"
int __pyx_module_is_main_watarray = 0;

/* Implementation of 'watarray' */
static PyObject *__pyx_builtin_MemoryError;
static int __pyx_pf_8watarray_8WatArray___cinit__(struct __pyx_obj_8watarray_WatArray *__pyx_v_self); /* proto */
static void __pyx_pf_8watarray_8WatArray_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_8watarray_WatArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_4Init(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, PyObject *__pyx_v_iterable, CYTHON_UNUSED PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_6Clear(struct __pyx_obj_8watarray_WatArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_8Lookup(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_10Rank(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c, uint64_t __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_12Select(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c, uint64_t __pyx_v_rank); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_14RankLessThan(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c, uint64_t __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_16RankMoreThan(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c, uint64_t __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_18RankAll(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c, uint64_t __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_20FreqRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_min_c, uint64_t __pyx_v_max_c, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_22MaxRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_24MinRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_26QuantileRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos, uint64_t __pyx_v_k); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_28ListModeRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_min_c, uint64_t __pyx_v_max_c, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos, uint64_t __pyx_v_num); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_30ListMinRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_min_c, uint64_t __pyx_v_max_c, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos, uint64_t __pyx_v_num); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_32ListMaxRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_min_c, uint64_t __pyx_v_max_c, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos, uint64_t __pyx_v_num); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_34Freq(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_36FreqSum(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_min_c, uint64_t __pyx_v_max_c); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_38alphabet_num(struct __pyx_obj_8watarray_WatArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_40length(struct __pyx_obj_8watarray_WatArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_42dump(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_44load(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_46dumps(struct __pyx_obj_8watarray_WatArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8WatArray_48loads(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static int __pyx_pf_8watarray_8BitArray___cinit__(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_size); /* proto */
static void __pyx_pf_8watarray_8BitArray_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_8watarray_BitArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_4Init(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_size); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_6Clear(struct __pyx_obj_8watarray_BitArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_8length(struct __pyx_obj_8watarray_BitArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_10one_num(struct __pyx_obj_8watarray_BitArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_12SetBit(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_bit, uint64_t __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_14Build(struct __pyx_obj_8watarray_BitArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_16Rank(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_bit, uint64_t __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_18Select(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_bit, uint64_t __pyx_v_rank); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_20Lookup(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_pos); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_22PopCount(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_x); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_24PopCountMask(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_x, uint64_t __pyx_v_offset); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_26SelectInBlock(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_x, uint64_t __pyx_v_rank); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_28GetBitNum(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_one_num, uint64_t __pyx_v_num, uint64_t __pyx_v_bit); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_30dump(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_32load(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_34dumps(struct __pyx_obj_8watarray_BitArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8watarray_8BitArray_36loads(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, PyObject *__pyx_v_data); /* proto */
static char __pyx_k_1[] = "utf-8";
static char __pyx_k_6[] = "0.6dev";
static char __pyx_k__c[] = "c";
static char __pyx_k__k[] = "k";
static char __pyx_k__x[] = "x";
static char __pyx_k__bit[] = "bit";
static char __pyx_k__num[] = "num";
static char __pyx_k__pos[] = "pos";
static char __pyx_k__rank[] = "rank";
static char __pyx_k__size[] = "size";
static char __pyx_k__max_c[] = "max_c";
static char __pyx_k__min_c[] = "min_c";
static char __pyx_k__encode[] = "encode";
static char __pyx_k__offset[] = "offset";
static char __pyx_k__beg_pos[] = "beg_pos";
static char __pyx_k__end_pos[] = "end_pos";
static char __pyx_k__one_num[] = "one_num";
static char __pyx_k__NOTFOUND[] = "NOTFOUND";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__iterable[] = "iterable";
static char __pyx_k__MemoryError[] = "MemoryError";
static char __pyx_k____version__[] = "__version__";
static char __pyx_k__alphabet_num[] = "alphabet_num";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_n_s__MemoryError;
static PyObject *__pyx_n_s__NOTFOUND;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s____version__;
static PyObject *__pyx_n_s__alphabet_num;
static PyObject *__pyx_n_s__beg_pos;
static PyObject *__pyx_n_s__bit;
static PyObject *__pyx_n_s__c;
static PyObject *__pyx_n_s__encode;
static PyObject *__pyx_n_s__end_pos;
static PyObject *__pyx_n_s__iterable;
static PyObject *__pyx_n_s__k;
static PyObject *__pyx_n_s__max_c;
static PyObject *__pyx_n_s__min_c;
static PyObject *__pyx_n_s__num;
static PyObject *__pyx_n_s__offset;
static PyObject *__pyx_n_s__one_num;
static PyObject *__pyx_n_s__pos;
static PyObject *__pyx_n_s__rank;
static PyObject *__pyx_n_s__size;
static PyObject *__pyx_n_s__x;
static PyObject *__pyx_k_tuple_2;
static PyObject *__pyx_k_tuple_3;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_5;

/* Python wrapper */
static int __pyx_pw_8watarray_8WatArray_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8watarray_8WatArray_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8watarray_8WatArray___cinit__(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":16
 * cdef class WatArray:
 *     cdef cpp_watarray.WatArray *thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new cpp_watarray.WatArray()
 *         if self.thisptr is NULL:
 */

static int __pyx_pf_8watarray_8WatArray___cinit__(struct __pyx_obj_8watarray_WatArray *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  wat_array::WatArray *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "watarray.pyx":17
 *     cdef cpp_watarray.WatArray *thisptr
 *     def __cinit__(self):
 *         self.thisptr = new cpp_watarray.WatArray()             # <<<<<<<<<<<<<<
 *         if self.thisptr is NULL:
 *             raise MemoryError
 */
  try {__pyx_t_1 = new wat_array::WatArray();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_self->thisptr = __pyx_t_1;

  /* "watarray.pyx":18
 *     def __cinit__(self):
 *         self.thisptr = new cpp_watarray.WatArray()
 *         if self.thisptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *     def __dealloc__(self):
 */
  __pyx_t_2 = (__pyx_v_self->thisptr == NULL);
  if (__pyx_t_2) {

    /* "watarray.pyx":19
 *         self.thisptr = new cpp_watarray.WatArray()
 *         if self.thisptr is NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("watarray.WatArray.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_8watarray_8WatArray_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8watarray_8WatArray_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8watarray_8WatArray_2__dealloc__(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "watarray.pyx":20
 *         if self.thisptr is NULL:
 *             raise MemoryError
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     def Init(self, iterable, *args):
 */

static void __pyx_pf_8watarray_8WatArray_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_8watarray_WatArray *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "watarray.pyx":21
 *             raise MemoryError
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *     def Init(self, iterable, *args):
 *         self._Init(iterable)
 */
  delete __pyx_v_self->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_5Init(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_4Init[] = "WatArray.Init(self, iterable, *args)";
static PyObject *__pyx_pw_8watarray_8WatArray_5Init(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_iterable = 0;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Init (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__iterable,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__iterable)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "Init") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_iterable = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Init", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_AddTraceback("watarray.WatArray.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_4Init(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_iterable, __pyx_v_args);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":22
 *     def __dealloc__(self):
 *         del self.thisptr
 *     def Init(self, iterable, *args):             # <<<<<<<<<<<<<<
 *         self._Init(iterable)
 *     cdef _Init(self, iterable):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_4Init(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, PyObject *__pyx_v_iterable, CYTHON_UNUSED PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Init", 0);

  /* "watarray.pyx":23
 *         del self.thisptr
 *     def Init(self, iterable, *args):
 *         self._Init(iterable)             # <<<<<<<<<<<<<<
 *     cdef _Init(self, iterable):
 *         cdef vector[uint64_t] *v = new vector[uint64_t]()
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_8watarray_WatArray *)__pyx_v_self->__pyx_vtab)->_Init(__pyx_v_self, __pyx_v_iterable); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":24
 *     def Init(self, iterable, *args):
 *         self._Init(iterable)
 *     cdef _Init(self, iterable):             # <<<<<<<<<<<<<<
 *         cdef vector[uint64_t] *v = new vector[uint64_t]()
 *         if v is NULL:
 */

static PyObject *__pyx_f_8watarray_8WatArray__Init(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, PyObject *__pyx_v_iterable) {
  std::vector<uint64_t> *__pyx_v_v;
  uint64_t __pyx_v_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<uint64_t> *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  uint64_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_Init", 0);

  /* "watarray.pyx":25
 *         self._Init(iterable)
 *     cdef _Init(self, iterable):
 *         cdef vector[uint64_t] *v = new vector[uint64_t]()             # <<<<<<<<<<<<<<
 *         if v is NULL:
 *             raise MemoryError
 */
  try {__pyx_t_1 = new std::vector<uint64_t>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_v = __pyx_t_1;

  /* "watarray.pyx":26
 *     cdef _Init(self, iterable):
 *         cdef vector[uint64_t] *v = new vector[uint64_t]()
 *         if v is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 *         cdef uint64_t c
 */
  __pyx_t_2 = (__pyx_v_v == NULL);
  if (__pyx_t_2) {

    /* "watarray.pyx":27
 *         cdef vector[uint64_t] *v = new vector[uint64_t]()
 *         if v is NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 *         cdef uint64_t c
 *         for c in iterable:
 */
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "watarray.pyx":29
 *             raise MemoryError
 *         cdef uint64_t c
 *         for c in iterable:             # <<<<<<<<<<<<<<
 *             v.push_back(c)
 *         self.thisptr.Init(dereference(v))
 */
  if (PyList_CheckExact(__pyx_v_iterable) || PyTuple_CheckExact(__pyx_v_iterable)) {
    __pyx_t_3 = __pyx_v_iterable; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_iterable); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_6 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_6)) {
        if (PyErr_Occurred()) {
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __pyx_t_7 = __Pyx_PyInt_from_py_uint64_t(__pyx_t_6); if (unlikely((__pyx_t_7 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_c = __pyx_t_7;

    /* "watarray.pyx":30
 *         cdef uint64_t c
 *         for c in iterable:
 *             v.push_back(c)             # <<<<<<<<<<<<<<
 *         self.thisptr.Init(dereference(v))
 *         del v
 */
    __pyx_v_v->push_back(__pyx_v_c);
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "watarray.pyx":31
 *         for c in iterable:
 *             v.push_back(c)
 *         self.thisptr.Init(dereference(v))             # <<<<<<<<<<<<<<
 *         del v
 *     def Clear(self):
 */
  try {__pyx_v_self->thisptr->Init((*__pyx_v_v));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "watarray.pyx":32
 *             v.push_back(c)
 *         self.thisptr.Init(dereference(v))
 *         del v             # <<<<<<<<<<<<<<
 *     def Clear(self):
 *         self.thisptr.Clear()
 */
  delete __pyx_v_v;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("watarray.WatArray._Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_7Clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8watarray_8WatArray_6Clear[] = "WatArray.Clear(self)";
static PyObject *__pyx_pw_8watarray_8WatArray_7Clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Clear (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8WatArray_6Clear(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":33
 *         self.thisptr.Init(dereference(v))
 *         del v
 *     def Clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.Clear()
 *     def Lookup(self, uint64_t pos):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_6Clear(struct __pyx_obj_8watarray_WatArray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Clear", 0);

  /* "watarray.pyx":34
 *         del v
 *     def Clear(self):
 *         self.thisptr.Clear()             # <<<<<<<<<<<<<<
 *     def Lookup(self, uint64_t pos):
 *         return self.thisptr.Lookup(pos)
 */
  try {__pyx_v_self->thisptr->Clear();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("watarray.WatArray.Clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_9Lookup(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos); /*proto*/
static char __pyx_doc_8watarray_8WatArray_8Lookup[] = "WatArray.Lookup(self, uint64_t pos)";
static PyObject *__pyx_pw_8watarray_8WatArray_9Lookup(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos) {
  uint64_t __pyx_v_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Lookup (wrapper)", 0);
  assert(__pyx_arg_pos); {
    __pyx_v_pos = __Pyx_PyInt_from_py_uint64_t(__pyx_arg_pos); if (unlikely((__pyx_v_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.Lookup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_8Lookup(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), ((uint64_t)__pyx_v_pos));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":35
 *     def Clear(self):
 *         self.thisptr.Clear()
 *     def Lookup(self, uint64_t pos):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Lookup(pos)
 *     def Rank(self, uint64_t c, uint64_t pos):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_8Lookup(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Lookup", 0);

  /* "watarray.pyx":36
 *         self.thisptr.Clear()
 *     def Lookup(self, uint64_t pos):
 *         return self.thisptr.Lookup(pos)             # <<<<<<<<<<<<<<
 *     def Rank(self, uint64_t c, uint64_t pos):
 *         return self.thisptr.Rank(c, pos)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->Lookup(__pyx_v_pos)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.Lookup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_11Rank(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_10Rank[] = "WatArray.Rank(self, uint64_t c, uint64_t pos)";
static PyObject *__pyx_pw_8watarray_8WatArray_11Rank(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_c;
  uint64_t __pyx_v_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Rank (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__c,&__pyx_n_s__pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Rank", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Rank") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_c = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pos = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Rank", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.Rank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_10Rank(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_c, __pyx_v_pos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":37
 *     def Lookup(self, uint64_t pos):
 *         return self.thisptr.Lookup(pos)
 *     def Rank(self, uint64_t c, uint64_t pos):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Rank(c, pos)
 *     def Select(self, uint64_t c, uint64_t rank):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_10Rank(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c, uint64_t __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Rank", 0);

  /* "watarray.pyx":38
 *         return self.thisptr.Lookup(pos)
 *     def Rank(self, uint64_t c, uint64_t pos):
 *         return self.thisptr.Rank(c, pos)             # <<<<<<<<<<<<<<
 *     def Select(self, uint64_t c, uint64_t rank):
 *         return self.thisptr.Select(c, rank)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->Rank(__pyx_v_c, __pyx_v_pos)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.Rank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_13Select(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_12Select[] = "WatArray.Select(self, uint64_t c, uint64_t rank)";
static PyObject *__pyx_pw_8watarray_8WatArray_13Select(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_c;
  uint64_t __pyx_v_rank;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Select (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__c,&__pyx_n_s__rank,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rank)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Select", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Select") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_c = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rank = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_rank == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Select", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.Select", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_12Select(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_c, __pyx_v_rank);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":39
 *     def Rank(self, uint64_t c, uint64_t pos):
 *         return self.thisptr.Rank(c, pos)
 *     def Select(self, uint64_t c, uint64_t rank):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Select(c, rank)
 *     def RankLessThan(self, uint64_t c, uint64_t pos):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_12Select(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c, uint64_t __pyx_v_rank) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Select", 0);

  /* "watarray.pyx":40
 *         return self.thisptr.Rank(c, pos)
 *     def Select(self, uint64_t c, uint64_t rank):
 *         return self.thisptr.Select(c, rank)             # <<<<<<<<<<<<<<
 *     def RankLessThan(self, uint64_t c, uint64_t pos):
 *         return self.thisptr.RankLessThan(c, pos)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->Select(__pyx_v_c, __pyx_v_rank)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.Select", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_15RankLessThan(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_14RankLessThan[] = "WatArray.RankLessThan(self, uint64_t c, uint64_t pos)";
static PyObject *__pyx_pw_8watarray_8WatArray_15RankLessThan(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_c;
  uint64_t __pyx_v_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("RankLessThan (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__c,&__pyx_n_s__pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RankLessThan", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "RankLessThan") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_c = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pos = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("RankLessThan", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.RankLessThan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_14RankLessThan(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_c, __pyx_v_pos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":41
 *     def Select(self, uint64_t c, uint64_t rank):
 *         return self.thisptr.Select(c, rank)
 *     def RankLessThan(self, uint64_t c, uint64_t pos):             # <<<<<<<<<<<<<<
 *         return self.thisptr.RankLessThan(c, pos)
 *     def RankMoreThan(self, uint64_t c, uint64_t pos):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_14RankLessThan(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c, uint64_t __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("RankLessThan", 0);

  /* "watarray.pyx":42
 *         return self.thisptr.Select(c, rank)
 *     def RankLessThan(self, uint64_t c, uint64_t pos):
 *         return self.thisptr.RankLessThan(c, pos)             # <<<<<<<<<<<<<<
 *     def RankMoreThan(self, uint64_t c, uint64_t pos):
 *         return self.thisptr.RankMoreThan(c, pos)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->RankLessThan(__pyx_v_c, __pyx_v_pos)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.RankLessThan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_17RankMoreThan(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_16RankMoreThan[] = "WatArray.RankMoreThan(self, uint64_t c, uint64_t pos)";
static PyObject *__pyx_pw_8watarray_8WatArray_17RankMoreThan(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_c;
  uint64_t __pyx_v_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("RankMoreThan (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__c,&__pyx_n_s__pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RankMoreThan", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "RankMoreThan") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_c = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pos = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("RankMoreThan", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.RankMoreThan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_16RankMoreThan(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_c, __pyx_v_pos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":43
 *     def RankLessThan(self, uint64_t c, uint64_t pos):
 *         return self.thisptr.RankLessThan(c, pos)
 *     def RankMoreThan(self, uint64_t c, uint64_t pos):             # <<<<<<<<<<<<<<
 *         return self.thisptr.RankMoreThan(c, pos)
 *     def RankAll(self, uint64_t c, uint64_t pos):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_16RankMoreThan(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c, uint64_t __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("RankMoreThan", 0);

  /* "watarray.pyx":44
 *         return self.thisptr.RankLessThan(c, pos)
 *     def RankMoreThan(self, uint64_t c, uint64_t pos):
 *         return self.thisptr.RankMoreThan(c, pos)             # <<<<<<<<<<<<<<
 *     def RankAll(self, uint64_t c, uint64_t pos):
 *         cdef uint64_t rank = NOTFOUND, rank_less_than = NOTFOUND, rank_more_than = NOTFOUND
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->RankMoreThan(__pyx_v_c, __pyx_v_pos)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.RankMoreThan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_19RankAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_18RankAll[] = "WatArray.RankAll(self, uint64_t c, uint64_t pos)";
static PyObject *__pyx_pw_8watarray_8WatArray_19RankAll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_c;
  uint64_t __pyx_v_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("RankAll (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__c,&__pyx_n_s__pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("RankAll", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "RankAll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_c = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pos = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("RankAll", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.RankAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_18RankAll(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_c, __pyx_v_pos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":45
 *     def RankMoreThan(self, uint64_t c, uint64_t pos):
 *         return self.thisptr.RankMoreThan(c, pos)
 *     def RankAll(self, uint64_t c, uint64_t pos):             # <<<<<<<<<<<<<<
 *         cdef uint64_t rank = NOTFOUND, rank_less_than = NOTFOUND, rank_more_than = NOTFOUND
 *         self.thisptr.RankAll(c, pos, rank, rank_less_than, rank_more_than)
 */

static PyObject *__pyx_pf_8watarray_8WatArray_18RankAll(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c, uint64_t __pyx_v_pos) {
  uint64_t __pyx_v_rank;
  uint64_t __pyx_v_rank_less_than;
  uint64_t __pyx_v_rank_more_than;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uint64_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("RankAll", 0);

  /* "watarray.pyx":46
 *         return self.thisptr.RankMoreThan(c, pos)
 *     def RankAll(self, uint64_t c, uint64_t pos):
 *         cdef uint64_t rank = NOTFOUND, rank_less_than = NOTFOUND, rank_more_than = NOTFOUND             # <<<<<<<<<<<<<<
 *         self.thisptr.RankAll(c, pos, rank, rank_less_than, rank_more_than)
 *         return (rank, rank_less_than, rank_more_than)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTFOUND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rank = __pyx_t_2;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTFOUND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rank_less_than = __pyx_t_2;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTFOUND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rank_more_than = __pyx_t_2;

  /* "watarray.pyx":47
 *     def RankAll(self, uint64_t c, uint64_t pos):
 *         cdef uint64_t rank = NOTFOUND, rank_less_than = NOTFOUND, rank_more_than = NOTFOUND
 *         self.thisptr.RankAll(c, pos, rank, rank_less_than, rank_more_than)             # <<<<<<<<<<<<<<
 *         return (rank, rank_less_than, rank_more_than)
 *     def FreqRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos):
 */
  __pyx_v_self->thisptr->RankAll(__pyx_v_c, __pyx_v_pos, __pyx_v_rank, __pyx_v_rank_less_than, __pyx_v_rank_more_than);

  /* "watarray.pyx":48
 *         cdef uint64_t rank = NOTFOUND, rank_less_than = NOTFOUND, rank_more_than = NOTFOUND
 *         self.thisptr.RankAll(c, pos, rank, rank_less_than, rank_more_than)
 *         return (rank, rank_less_than, rank_more_than)             # <<<<<<<<<<<<<<
 *     def FreqRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos):
 *         if max_c >= self.alphabet_num():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_rank); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_rank_less_than); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_rank_more_than); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("watarray.WatArray.RankAll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_21FreqRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_20FreqRange[] = "WatArray.FreqRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos)";
static PyObject *__pyx_pw_8watarray_8WatArray_21FreqRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_min_c;
  uint64_t __pyx_v_max_c;
  uint64_t __pyx_v_beg_pos;
  uint64_t __pyx_v_end_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FreqRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__min_c,&__pyx_n_s__max_c,&__pyx_n_s__beg_pos,&__pyx_n_s__end_pos,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min_c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FreqRange", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__beg_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FreqRange", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FreqRange", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "FreqRange") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_min_c = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_min_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_c = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_max_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_beg_pos = __Pyx_PyInt_from_py_uint64_t(values[2]); if (unlikely((__pyx_v_beg_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_end_pos = __Pyx_PyInt_from_py_uint64_t(values[3]); if (unlikely((__pyx_v_end_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FreqRange", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.FreqRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_20FreqRange(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_min_c, __pyx_v_max_c, __pyx_v_beg_pos, __pyx_v_end_pos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":49
 *         self.thisptr.RankAll(c, pos, rank, rank_less_than, rank_more_than)
 *         return (rank, rank_less_than, rank_more_than)
 *     def FreqRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos):             # <<<<<<<<<<<<<<
 *         if max_c >= self.alphabet_num():
 *             return NOTFOUND
 */

static PyObject *__pyx_pf_8watarray_8WatArray_20FreqRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_min_c, uint64_t __pyx_v_max_c, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FreqRange", 0);

  /* "watarray.pyx":50
 *         return (rank, rank_less_than, rank_more_than)
 *     def FreqRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos):
 *         if max_c >= self.alphabet_num():             # <<<<<<<<<<<<<<
 *             return NOTFOUND
 *         return self.thisptr.FreqRange(min_c, max_c, beg_pos, end_pos)
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_max_c); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__alphabet_num); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "watarray.pyx":51
 *     def FreqRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos):
 *         if max_c >= self.alphabet_num():
 *             return NOTFOUND             # <<<<<<<<<<<<<<
 *         return self.thisptr.FreqRange(min_c, max_c, beg_pos, end_pos)
 *     def MaxRange(self, uint64_t beg_pos, uint64_t end_pos):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTFOUND); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "watarray.pyx":52
 *         if max_c >= self.alphabet_num():
 *             return NOTFOUND
 *         return self.thisptr.FreqRange(min_c, max_c, beg_pos, end_pos)             # <<<<<<<<<<<<<<
 *     def MaxRange(self, uint64_t beg_pos, uint64_t end_pos):
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->FreqRange(__pyx_v_min_c, __pyx_v_max_c, __pyx_v_beg_pos, __pyx_v_end_pos)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("watarray.WatArray.FreqRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_23MaxRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_22MaxRange[] = "WatArray.MaxRange(self, uint64_t beg_pos, uint64_t end_pos)";
static PyObject *__pyx_pw_8watarray_8WatArray_23MaxRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_beg_pos;
  uint64_t __pyx_v_end_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("MaxRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__beg_pos,&__pyx_n_s__end_pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__beg_pos)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("MaxRange", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "MaxRange") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_beg_pos = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_beg_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_end_pos = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_end_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("MaxRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.MaxRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_22MaxRange(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_beg_pos, __pyx_v_end_pos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":53
 *             return NOTFOUND
 *         return self.thisptr.FreqRange(min_c, max_c, beg_pos, end_pos)
 *     def MaxRange(self, uint64_t beg_pos, uint64_t end_pos):             # <<<<<<<<<<<<<<
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 *         self.thisptr.MaxRange(beg_pos, end_pos, pos, val)
 */

static PyObject *__pyx_pf_8watarray_8WatArray_22MaxRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos) {
  uint64_t __pyx_v_pos;
  uint64_t __pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uint64_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("MaxRange", 0);

  /* "watarray.pyx":54
 *         return self.thisptr.FreqRange(min_c, max_c, beg_pos, end_pos)
 *     def MaxRange(self, uint64_t beg_pos, uint64_t end_pos):
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND             # <<<<<<<<<<<<<<
 *         self.thisptr.MaxRange(beg_pos, end_pos, pos, val)
 *         return (pos, val)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTFOUND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pos = __pyx_t_2;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTFOUND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_val = __pyx_t_2;

  /* "watarray.pyx":55
 *     def MaxRange(self, uint64_t beg_pos, uint64_t end_pos):
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 *         self.thisptr.MaxRange(beg_pos, end_pos, pos, val)             # <<<<<<<<<<<<<<
 *         return (pos, val)
 *     def MinRange(self, uint64_t beg_pos, uint64_t end_pos):
 */
  __pyx_v_self->thisptr->MaxRange(__pyx_v_beg_pos, __pyx_v_end_pos, __pyx_v_pos, __pyx_v_val);

  /* "watarray.pyx":56
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 *         self.thisptr.MaxRange(beg_pos, end_pos, pos, val)
 *         return (pos, val)             # <<<<<<<<<<<<<<
 *     def MinRange(self, uint64_t beg_pos, uint64_t end_pos):
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_val); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("watarray.WatArray.MaxRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_25MinRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_24MinRange[] = "WatArray.MinRange(self, uint64_t beg_pos, uint64_t end_pos)";
static PyObject *__pyx_pw_8watarray_8WatArray_25MinRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_beg_pos;
  uint64_t __pyx_v_end_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("MinRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__beg_pos,&__pyx_n_s__end_pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__beg_pos)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("MinRange", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "MinRange") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_beg_pos = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_beg_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_end_pos = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_end_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("MinRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.MinRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_24MinRange(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_beg_pos, __pyx_v_end_pos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":57
 *         self.thisptr.MaxRange(beg_pos, end_pos, pos, val)
 *         return (pos, val)
 *     def MinRange(self, uint64_t beg_pos, uint64_t end_pos):             # <<<<<<<<<<<<<<
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 *         self.thisptr.MinRange(beg_pos, end_pos, pos, val)
 */

static PyObject *__pyx_pf_8watarray_8WatArray_24MinRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos) {
  uint64_t __pyx_v_pos;
  uint64_t __pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uint64_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("MinRange", 0);

  /* "watarray.pyx":58
 *         return (pos, val)
 *     def MinRange(self, uint64_t beg_pos, uint64_t end_pos):
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND             # <<<<<<<<<<<<<<
 *         self.thisptr.MinRange(beg_pos, end_pos, pos, val)
 *         return (pos, val)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTFOUND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pos = __pyx_t_2;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTFOUND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_val = __pyx_t_2;

  /* "watarray.pyx":59
 *     def MinRange(self, uint64_t beg_pos, uint64_t end_pos):
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 *         self.thisptr.MinRange(beg_pos, end_pos, pos, val)             # <<<<<<<<<<<<<<
 *         return (pos, val)
 *     def QuantileRange(self, uint64_t beg_pos, uint64_t end_pos, uint64_t k):
 */
  __pyx_v_self->thisptr->MinRange(__pyx_v_beg_pos, __pyx_v_end_pos, __pyx_v_pos, __pyx_v_val);

  /* "watarray.pyx":60
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 *         self.thisptr.MinRange(beg_pos, end_pos, pos, val)
 *         return (pos, val)             # <<<<<<<<<<<<<<
 *     def QuantileRange(self, uint64_t beg_pos, uint64_t end_pos, uint64_t k):
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_val); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("watarray.WatArray.MinRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_27QuantileRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_26QuantileRange[] = "WatArray.QuantileRange(self, uint64_t beg_pos, uint64_t end_pos, uint64_t k)";
static PyObject *__pyx_pw_8watarray_8WatArray_27QuantileRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_beg_pos;
  uint64_t __pyx_v_end_pos;
  uint64_t __pyx_v_k;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("QuantileRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__beg_pos,&__pyx_n_s__end_pos,&__pyx_n_s__k,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__beg_pos)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("QuantileRange", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("QuantileRange", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "QuantileRange") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_beg_pos = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_beg_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_end_pos = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_end_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_k = __Pyx_PyInt_from_py_uint64_t(values[2]); if (unlikely((__pyx_v_k == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("QuantileRange", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.QuantileRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_26QuantileRange(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_beg_pos, __pyx_v_end_pos, __pyx_v_k);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":61
 *         self.thisptr.MinRange(beg_pos, end_pos, pos, val)
 *         return (pos, val)
 *     def QuantileRange(self, uint64_t beg_pos, uint64_t end_pos, uint64_t k):             # <<<<<<<<<<<<<<
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 *         self.thisptr.QuantileRange(beg_pos, end_pos, k, pos, val)
 */

static PyObject *__pyx_pf_8watarray_8WatArray_26QuantileRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos, uint64_t __pyx_v_k) {
  uint64_t __pyx_v_pos;
  uint64_t __pyx_v_val;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uint64_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("QuantileRange", 0);

  /* "watarray.pyx":62
 *         return (pos, val)
 *     def QuantileRange(self, uint64_t beg_pos, uint64_t end_pos, uint64_t k):
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND             # <<<<<<<<<<<<<<
 *         self.thisptr.QuantileRange(beg_pos, end_pos, k, pos, val)
 *         return (pos, val)
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTFOUND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pos = __pyx_t_2;
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__NOTFOUND); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_from_py_uint64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_val = __pyx_t_2;

  /* "watarray.pyx":63
 *     def QuantileRange(self, uint64_t beg_pos, uint64_t end_pos, uint64_t k):
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 *         self.thisptr.QuantileRange(beg_pos, end_pos, k, pos, val)             # <<<<<<<<<<<<<<
 *         return (pos, val)
 *     def ListModeRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 */
  __pyx_v_self->thisptr->QuantileRange(__pyx_v_beg_pos, __pyx_v_end_pos, __pyx_v_k, __pyx_v_pos, __pyx_v_val);

  /* "watarray.pyx":64
 *         cdef uint64_t pos = NOTFOUND, val = NOTFOUND
 *         self.thisptr.QuantileRange(beg_pos, end_pos, k, pos, val)
 *         return (pos, val)             # <<<<<<<<<<<<<<
 *     def ListModeRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 *         cdef vector[ListResult] res = vector[ListResult]()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_pos); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_val); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("watarray.WatArray.QuantileRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_29ListModeRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_28ListModeRange[] = "WatArray.ListModeRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num)";
static PyObject *__pyx_pw_8watarray_8WatArray_29ListModeRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_min_c;
  uint64_t __pyx_v_max_c;
  uint64_t __pyx_v_beg_pos;
  uint64_t __pyx_v_end_pos;
  uint64_t __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ListModeRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__min_c,&__pyx_n_s__max_c,&__pyx_n_s__beg_pos,&__pyx_n_s__end_pos,&__pyx_n_s__num,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min_c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListModeRange", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__beg_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListModeRange", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListModeRange", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListModeRange", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ListModeRange") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_min_c = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_min_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_c = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_max_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_beg_pos = __Pyx_PyInt_from_py_uint64_t(values[2]); if (unlikely((__pyx_v_beg_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_end_pos = __Pyx_PyInt_from_py_uint64_t(values[3]); if (unlikely((__pyx_v_end_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_num = __Pyx_PyInt_from_py_uint64_t(values[4]); if (unlikely((__pyx_v_num == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ListModeRange", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.ListModeRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_28ListModeRange(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_min_c, __pyx_v_max_c, __pyx_v_beg_pos, __pyx_v_end_pos, __pyx_v_num);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":65
 *         self.thisptr.QuantileRange(beg_pos, end_pos, k, pos, val)
 *         return (pos, val)
 *     def ListModeRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):             # <<<<<<<<<<<<<<
 *         cdef vector[ListResult] res = vector[ListResult]()
 *         self.thisptr.ListModeRange(min_c, max_c, beg_pos, end_pos, num, res)
 */

static PyObject *__pyx_pf_8watarray_8WatArray_28ListModeRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_min_c, uint64_t __pyx_v_max_c, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos, uint64_t __pyx_v_num) {
  std::vector<wat_array::ListResult> __pyx_v_res;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<wat_array::ListResult> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ListModeRange", 0);

  /* "watarray.pyx":66
 *         return (pos, val)
 *     def ListModeRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 *         cdef vector[ListResult] res = vector[ListResult]()             # <<<<<<<<<<<<<<
 *         self.thisptr.ListModeRange(min_c, max_c, beg_pos, end_pos, num, res)
 *         r = self._ListRange(res)
 */
  try {__pyx_t_1 = std::vector<wat_array::ListResult>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_res = __pyx_t_1;

  /* "watarray.pyx":67
 *     def ListModeRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 *         cdef vector[ListResult] res = vector[ListResult]()
 *         self.thisptr.ListModeRange(min_c, max_c, beg_pos, end_pos, num, res)             # <<<<<<<<<<<<<<
 *         r = self._ListRange(res)
 *         return r
 */
  __pyx_v_self->thisptr->ListModeRange(__pyx_v_min_c, __pyx_v_max_c, __pyx_v_beg_pos, __pyx_v_end_pos, __pyx_v_num, __pyx_v_res);

  /* "watarray.pyx":68
 *         cdef vector[ListResult] res = vector[ListResult]()
 *         self.thisptr.ListModeRange(min_c, max_c, beg_pos, end_pos, num, res)
 *         r = self._ListRange(res)             # <<<<<<<<<<<<<<
 *         return r
 *     def ListMinRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_8watarray_WatArray *)__pyx_v_self->__pyx_vtab)->_ListRange(__pyx_v_self, __pyx_v_res); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_r = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "watarray.pyx":69
 *         self.thisptr.ListModeRange(min_c, max_c, beg_pos, end_pos, num, res)
 *         r = self._ListRange(res)
 *         return r             # <<<<<<<<<<<<<<
 *     def ListMinRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 *         cdef vector[ListResult] res = vector[ListResult]()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_r);
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("watarray.WatArray.ListModeRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_31ListMinRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_30ListMinRange[] = "WatArray.ListMinRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num)";
static PyObject *__pyx_pw_8watarray_8WatArray_31ListMinRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_min_c;
  uint64_t __pyx_v_max_c;
  uint64_t __pyx_v_beg_pos;
  uint64_t __pyx_v_end_pos;
  uint64_t __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ListMinRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__min_c,&__pyx_n_s__max_c,&__pyx_n_s__beg_pos,&__pyx_n_s__end_pos,&__pyx_n_s__num,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min_c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListMinRange", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__beg_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListMinRange", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListMinRange", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListMinRange", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ListMinRange") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_min_c = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_min_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_c = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_max_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_beg_pos = __Pyx_PyInt_from_py_uint64_t(values[2]); if (unlikely((__pyx_v_beg_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_end_pos = __Pyx_PyInt_from_py_uint64_t(values[3]); if (unlikely((__pyx_v_end_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_num = __Pyx_PyInt_from_py_uint64_t(values[4]); if (unlikely((__pyx_v_num == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ListMinRange", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.ListMinRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_30ListMinRange(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_min_c, __pyx_v_max_c, __pyx_v_beg_pos, __pyx_v_end_pos, __pyx_v_num);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":70
 *         r = self._ListRange(res)
 *         return r
 *     def ListMinRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):             # <<<<<<<<<<<<<<
 *         cdef vector[ListResult] res = vector[ListResult]()
 *         self.thisptr.ListMinRange(min_c, max_c, beg_pos, end_pos, num, res)
 */

static PyObject *__pyx_pf_8watarray_8WatArray_30ListMinRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_min_c, uint64_t __pyx_v_max_c, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos, uint64_t __pyx_v_num) {
  std::vector<wat_array::ListResult> __pyx_v_res;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<wat_array::ListResult> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ListMinRange", 0);

  /* "watarray.pyx":71
 *         return r
 *     def ListMinRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 *         cdef vector[ListResult] res = vector[ListResult]()             # <<<<<<<<<<<<<<
 *         self.thisptr.ListMinRange(min_c, max_c, beg_pos, end_pos, num, res)
 *         r = self._ListRange(res)
 */
  try {__pyx_t_1 = std::vector<wat_array::ListResult>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_res = __pyx_t_1;

  /* "watarray.pyx":72
 *     def ListMinRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 *         cdef vector[ListResult] res = vector[ListResult]()
 *         self.thisptr.ListMinRange(min_c, max_c, beg_pos, end_pos, num, res)             # <<<<<<<<<<<<<<
 *         r = self._ListRange(res)
 *         return r
 */
  __pyx_v_self->thisptr->ListMinRange(__pyx_v_min_c, __pyx_v_max_c, __pyx_v_beg_pos, __pyx_v_end_pos, __pyx_v_num, __pyx_v_res);

  /* "watarray.pyx":73
 *         cdef vector[ListResult] res = vector[ListResult]()
 *         self.thisptr.ListMinRange(min_c, max_c, beg_pos, end_pos, num, res)
 *         r = self._ListRange(res)             # <<<<<<<<<<<<<<
 *         return r
 *     def ListMaxRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_8watarray_WatArray *)__pyx_v_self->__pyx_vtab)->_ListRange(__pyx_v_self, __pyx_v_res); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_r = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "watarray.pyx":74
 *         self.thisptr.ListMinRange(min_c, max_c, beg_pos, end_pos, num, res)
 *         r = self._ListRange(res)
 *         return r             # <<<<<<<<<<<<<<
 *     def ListMaxRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 *         cdef vector[ListResult] res = vector[ListResult]()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_r);
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("watarray.WatArray.ListMinRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_33ListMaxRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_32ListMaxRange[] = "WatArray.ListMaxRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num)";
static PyObject *__pyx_pw_8watarray_8WatArray_33ListMaxRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_min_c;
  uint64_t __pyx_v_max_c;
  uint64_t __pyx_v_beg_pos;
  uint64_t __pyx_v_end_pos;
  uint64_t __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ListMaxRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__min_c,&__pyx_n_s__max_c,&__pyx_n_s__beg_pos,&__pyx_n_s__end_pos,&__pyx_n_s__num,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min_c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListMaxRange", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__beg_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListMaxRange", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListMaxRange", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ListMaxRange", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ListMaxRange") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_min_c = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_min_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_c = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_max_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_beg_pos = __Pyx_PyInt_from_py_uint64_t(values[2]); if (unlikely((__pyx_v_beg_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_end_pos = __Pyx_PyInt_from_py_uint64_t(values[3]); if (unlikely((__pyx_v_end_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_num = __Pyx_PyInt_from_py_uint64_t(values[4]); if (unlikely((__pyx_v_num == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ListMaxRange", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.ListMaxRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_32ListMaxRange(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_min_c, __pyx_v_max_c, __pyx_v_beg_pos, __pyx_v_end_pos, __pyx_v_num);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":75
 *         r = self._ListRange(res)
 *         return r
 *     def ListMaxRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):             # <<<<<<<<<<<<<<
 *         cdef vector[ListResult] res = vector[ListResult]()
 *         self.thisptr.ListMaxRange(min_c, max_c, beg_pos, end_pos, num, res)
 */

static PyObject *__pyx_pf_8watarray_8WatArray_32ListMaxRange(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_min_c, uint64_t __pyx_v_max_c, uint64_t __pyx_v_beg_pos, uint64_t __pyx_v_end_pos, uint64_t __pyx_v_num) {
  std::vector<wat_array::ListResult> __pyx_v_res;
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<wat_array::ListResult> __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ListMaxRange", 0);

  /* "watarray.pyx":76
 *         return r
 *     def ListMaxRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 *         cdef vector[ListResult] res = vector[ListResult]()             # <<<<<<<<<<<<<<
 *         self.thisptr.ListMaxRange(min_c, max_c, beg_pos, end_pos, num, res)
 *         r = self._ListRange(res)
 */
  try {__pyx_t_1 = std::vector<wat_array::ListResult>();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_res = __pyx_t_1;

  /* "watarray.pyx":77
 *     def ListMaxRange(self, uint64_t min_c, uint64_t max_c, uint64_t beg_pos, uint64_t end_pos, uint64_t num):
 *         cdef vector[ListResult] res = vector[ListResult]()
 *         self.thisptr.ListMaxRange(min_c, max_c, beg_pos, end_pos, num, res)             # <<<<<<<<<<<<<<
 *         r = self._ListRange(res)
 *         return r
 */
  __pyx_v_self->thisptr->ListMaxRange(__pyx_v_min_c, __pyx_v_max_c, __pyx_v_beg_pos, __pyx_v_end_pos, __pyx_v_num, __pyx_v_res);

  /* "watarray.pyx":78
 *         cdef vector[ListResult] res = vector[ListResult]()
 *         self.thisptr.ListMaxRange(min_c, max_c, beg_pos, end_pos, num, res)
 *         r = self._ListRange(res)             # <<<<<<<<<<<<<<
 *         return r
 *     cdef _ListRange(self, vector[ListResult]& res):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_8watarray_WatArray *)__pyx_v_self->__pyx_vtab)->_ListRange(__pyx_v_self, __pyx_v_res); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_r = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "watarray.pyx":79
 *         self.thisptr.ListMaxRange(min_c, max_c, beg_pos, end_pos, num, res)
 *         r = self._ListRange(res)
 *         return r             # <<<<<<<<<<<<<<
 *     cdef _ListRange(self, vector[ListResult]& res):
 *         r = []
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_r);
  __pyx_r = __pyx_v_r;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("watarray.WatArray.ListMaxRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":80
 *         r = self._ListRange(res)
 *         return r
 *     cdef _ListRange(self, vector[ListResult]& res):             # <<<<<<<<<<<<<<
 *         r = []
 *         cdef vector[ListResult].iterator it = res.begin()
 */

static PyObject *__pyx_f_8watarray_8WatArray__ListRange(CYTHON_UNUSED struct __pyx_obj_8watarray_WatArray *__pyx_v_self, std::vector<wat_array::ListResult> &__pyx_v_res) {
  PyObject *__pyx_v_r = NULL;
  std::vector<wat_array::ListResult>::iterator __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ListRange", 0);

  /* "watarray.pyx":81
 *         return r
 *     cdef _ListRange(self, vector[ListResult]& res):
 *         r = []             # <<<<<<<<<<<<<<
 *         cdef vector[ListResult].iterator it = res.begin()
 *         while it != res.end():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "watarray.pyx":82
 *     cdef _ListRange(self, vector[ListResult]& res):
 *         r = []
 *         cdef vector[ListResult].iterator it = res.begin()             # <<<<<<<<<<<<<<
 *         while it != res.end():
 *             r.append((dereference(it).c, dereference(it).freq))
 */
  __pyx_v_it = __pyx_v_res.begin();

  /* "watarray.pyx":83
 *         r = []
 *         cdef vector[ListResult].iterator it = res.begin()
 *         while it != res.end():             # <<<<<<<<<<<<<<
 *             r.append((dereference(it).c, dereference(it).freq))
 *             preincrement(it)
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_it != __pyx_v_res.end());
    if (!__pyx_t_2) break;

    /* "watarray.pyx":84
 *         cdef vector[ListResult].iterator it = res.begin()
 *         while it != res.end():
 *             r.append((dereference(it).c, dereference(it).freq))             # <<<<<<<<<<<<<<
 *             preincrement(it)
 *         return r
 */
    __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t((*__pyx_v_it).c); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_to_py_uint64_t((*__pyx_v_it).freq); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_5 = PyList_Append(__pyx_v_r, ((PyObject *)__pyx_t_4)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

    /* "watarray.pyx":85
 *         while it != res.end():
 *             r.append((dereference(it).c, dereference(it).freq))
 *             preincrement(it)             # <<<<<<<<<<<<<<
 *         return r
 *     def Freq(self, uint64_t c):
 */
    (++__pyx_v_it);
  }

  /* "watarray.pyx":86
 *             r.append((dereference(it).c, dereference(it).freq))
 *             preincrement(it)
 *         return r             # <<<<<<<<<<<<<<
 *     def Freq(self, uint64_t c):
 *         return self.thisptr.Freq(c)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_r));
  __pyx_r = ((PyObject *)__pyx_v_r);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("watarray.WatArray._ListRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_35Freq(PyObject *__pyx_v_self, PyObject *__pyx_arg_c); /*proto*/
static char __pyx_doc_8watarray_8WatArray_34Freq[] = "WatArray.Freq(self, uint64_t c)";
static PyObject *__pyx_pw_8watarray_8WatArray_35Freq(PyObject *__pyx_v_self, PyObject *__pyx_arg_c) {
  uint64_t __pyx_v_c;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Freq (wrapper)", 0);
  assert(__pyx_arg_c); {
    __pyx_v_c = __Pyx_PyInt_from_py_uint64_t(__pyx_arg_c); if (unlikely((__pyx_v_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.Freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_34Freq(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), ((uint64_t)__pyx_v_c));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":87
 *             preincrement(it)
 *         return r
 *     def Freq(self, uint64_t c):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Freq(c)
 *     def FreqSum(self, uint64_t min_c, uint64_t max_c):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_34Freq(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Freq", 0);

  /* "watarray.pyx":88
 *         return r
 *     def Freq(self, uint64_t c):
 *         return self.thisptr.Freq(c)             # <<<<<<<<<<<<<<
 *     def FreqSum(self, uint64_t min_c, uint64_t max_c):
 *         return self.thisptr.FreqSum(min_c, max_c)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->Freq(__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.Freq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_37FreqSum(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8WatArray_36FreqSum[] = "WatArray.FreqSum(self, uint64_t min_c, uint64_t max_c)";
static PyObject *__pyx_pw_8watarray_8WatArray_37FreqSum(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_min_c;
  uint64_t __pyx_v_max_c;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FreqSum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__min_c,&__pyx_n_s__max_c,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min_c)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__max_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("FreqSum", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "FreqSum") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_min_c = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_min_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_c = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_max_c == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("FreqSum", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.WatArray.FreqSum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8WatArray_36FreqSum(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), __pyx_v_min_c, __pyx_v_max_c);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":89
 *     def Freq(self, uint64_t c):
 *         return self.thisptr.Freq(c)
 *     def FreqSum(self, uint64_t min_c, uint64_t max_c):             # <<<<<<<<<<<<<<
 *         return self.thisptr.FreqSum(min_c, max_c)
 *     def alphabet_num(self):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_36FreqSum(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, uint64_t __pyx_v_min_c, uint64_t __pyx_v_max_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FreqSum", 0);

  /* "watarray.pyx":90
 *         return self.thisptr.Freq(c)
 *     def FreqSum(self, uint64_t min_c, uint64_t max_c):
 *         return self.thisptr.FreqSum(min_c, max_c)             # <<<<<<<<<<<<<<
 *     def alphabet_num(self):
 *         return self.thisptr.alphabet_num()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->FreqSum(__pyx_v_min_c, __pyx_v_max_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.FreqSum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_39alphabet_num(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8watarray_8WatArray_38alphabet_num[] = "WatArray.alphabet_num(self)";
static PyObject *__pyx_pw_8watarray_8WatArray_39alphabet_num(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("alphabet_num (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8WatArray_38alphabet_num(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":91
 *     def FreqSum(self, uint64_t min_c, uint64_t max_c):
 *         return self.thisptr.FreqSum(min_c, max_c)
 *     def alphabet_num(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.alphabet_num()
 *     def length(self):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_38alphabet_num(struct __pyx_obj_8watarray_WatArray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("alphabet_num", 0);

  /* "watarray.pyx":92
 *         return self.thisptr.FreqSum(min_c, max_c)
 *     def alphabet_num(self):
 *         return self.thisptr.alphabet_num()             # <<<<<<<<<<<<<<
 *     def length(self):
 *         return self.thisptr.length()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->alphabet_num()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.alphabet_num", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_41length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8watarray_8WatArray_40length[] = "WatArray.length(self)";
static PyObject *__pyx_pw_8watarray_8WatArray_41length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("length (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8WatArray_40length(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":93
 *     def alphabet_num(self):
 *         return self.thisptr.alphabet_num()
 *     def length(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.length()
 *     def dump(self, filename):
 */

static PyObject *__pyx_pf_8watarray_8WatArray_40length(struct __pyx_obj_8watarray_WatArray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("length", 0);

  /* "watarray.pyx":94
 *         return self.thisptr.alphabet_num()
 *     def length(self):
 *         return self.thisptr.length()             # <<<<<<<<<<<<<<
 *     def dump(self, filename):
 *         if isinstance(filename, unicode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->length()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_43dump(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_8watarray_8WatArray_42dump[] = "WatArray.dump(self, filename)";
static PyObject *__pyx_pw_8watarray_8WatArray_43dump(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8WatArray_42dump(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), ((PyObject *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":95
 *     def length(self):
 *         return self.thisptr.length()
 *     def dump(self, filename):             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')
 */

static PyObject *__pyx_pf_8watarray_8WatArray_42dump(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "watarray.pyx":96
 *         return self.thisptr.length()
 *     def dump(self, filename):
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = filename.encode('utf-8')
 *         dump(self.thisptr, <char *>filename)
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyUnicode_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_filename, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "watarray.pyx":97
 *     def dump(self, filename):
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *         dump(self.thisptr, <char *>filename)
 *     def load(self, filename):
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_filename, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_filename);
    __pyx_v_filename = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "watarray.pyx":98
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')
 *         dump(self.thisptr, <char *>filename)             # <<<<<<<<<<<<<<
 *     def load(self, filename):
 *         if isinstance(filename, unicode):
 */
  __pyx_t_4 = PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {cpp_watarray::dump(__pyx_v_self->thisptr, ((char *)__pyx_t_4));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("watarray.WatArray.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_45load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_8watarray_8WatArray_44load[] = "WatArray.load(self, filename)";
static PyObject *__pyx_pw_8watarray_8WatArray_45load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8WatArray_44load(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), ((PyObject *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":99
 *             filename = filename.encode('utf-8')
 *         dump(self.thisptr, <char *>filename)
 *     def load(self, filename):             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')
 */

static PyObject *__pyx_pf_8watarray_8WatArray_44load(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "watarray.pyx":100
 *         dump(self.thisptr, <char *>filename)
 *     def load(self, filename):
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = filename.encode('utf-8')
 *         load(self.thisptr, <char *>filename)
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyUnicode_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_filename, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "watarray.pyx":101
 *     def load(self, filename):
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *         load(self.thisptr, <char *>filename)
 *     def dumps(self):
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_filename, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_3), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_filename);
    __pyx_v_filename = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "watarray.pyx":102
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')
 *         load(self.thisptr, <char *>filename)             # <<<<<<<<<<<<<<
 *     def dumps(self):
 *         cdef string str
 */
  __pyx_t_4 = PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {cpp_watarray::load(__pyx_v_self->thisptr, ((char *)__pyx_t_4));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("watarray.WatArray.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_47dumps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8watarray_8WatArray_46dumps[] = "WatArray.dumps(self)";
static PyObject *__pyx_pw_8watarray_8WatArray_47dumps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dumps (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8WatArray_46dumps(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":103
 *             filename = filename.encode('utf-8')
 *         load(self.thisptr, <char *>filename)
 *     def dumps(self):             # <<<<<<<<<<<<<<
 *         cdef string str
 *         dumps(self.thisptr, str)
 */

static PyObject *__pyx_pf_8watarray_8WatArray_46dumps(struct __pyx_obj_8watarray_WatArray *__pyx_v_self) {
  std::string __pyx_v_str;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dumps", 0);

  /* "watarray.pyx":105
 *     def dumps(self):
 *         cdef string str
 *         dumps(self.thisptr, str)             # <<<<<<<<<<<<<<
 *         cdef bytes data
 *         data = str.c_str()[:str.size()] # libcpp.string.data is not implemented
 */
  try {cpp_watarray::dumps(__pyx_v_self->thisptr, __pyx_v_str);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "watarray.pyx":107
 *         dumps(self.thisptr, str)
 *         cdef bytes data
 *         data = str.c_str()[:str.size()] # libcpp.string.data is not implemented             # <<<<<<<<<<<<<<
 *         return data
 *     def loads(self, bytes data):
 */
  __pyx_t_1 = PyBytes_FromStringAndSize(((const char*)__pyx_v_str.c_str()) + 0, __pyx_v_str.size() - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "watarray.pyx":108
 *         cdef bytes data
 *         data = str.c_str()[:str.size()] # libcpp.string.data is not implemented
 *         return data             # <<<<<<<<<<<<<<
 *     def loads(self, bytes data):
 *         cdef string str = string(data, len(data))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  __pyx_r = ((PyObject *)__pyx_v_data);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.WatArray.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8WatArray_49loads(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static char __pyx_doc_8watarray_8WatArray_48loads[] = "WatArray.loads(self, bytes data)";
static PyObject *__pyx_pw_8watarray_8WatArray_49loads(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loads (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8watarray_8WatArray_48loads(((struct __pyx_obj_8watarray_WatArray *)__pyx_v_self), ((PyObject*)__pyx_v_data));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":109
 *         data = str.c_str()[:str.size()] # libcpp.string.data is not implemented
 *         return data
 *     def loads(self, bytes data):             # <<<<<<<<<<<<<<
 *         cdef string str = string(data, len(data))
 *         loads(self.thisptr, str)
 */

static PyObject *__pyx_pf_8watarray_8WatArray_48loads(struct __pyx_obj_8watarray_WatArray *__pyx_v_self, PyObject *__pyx_v_data) {
  std::string __pyx_v_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loads", 0);

  /* "watarray.pyx":110
 *         return data
 *     def loads(self, bytes data):
 *         cdef string str = string(data, len(data))             # <<<<<<<<<<<<<<
 *         loads(self.thisptr, str)
 * 
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_data)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_data) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = PyBytes_GET_SIZE(((PyObject *)__pyx_v_data)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {__pyx_t_3 = std::string(__pyx_t_1, __pyx_t_2);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_str = __pyx_t_3;

  /* "watarray.pyx":111
 *     def loads(self, bytes data):
 *         cdef string str = string(data, len(data))
 *         loads(self.thisptr, str)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {cpp_watarray::loads(__pyx_v_self->thisptr, __pyx_v_str);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("watarray.WatArray.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_8watarray_8BitArray_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8watarray_8BitArray_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_size;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__size,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__size);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_size = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_size == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_size = ((uint64_t)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.BitArray.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8BitArray___cinit__(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), __pyx_v_size);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":116
 * cdef class BitArray:
 *     cdef cpp_watarray.BitArray *thisptr
 *     def __cinit__(self, uint64_t size = 0):             # <<<<<<<<<<<<<<
 *         self.thisptr = new cpp_watarray.BitArray(size)
 *     def __dealloc__(self):
 */

static int __pyx_pf_8watarray_8BitArray___cinit__(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_size) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  wat_array::BitArray *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "watarray.pyx":117
 *     cdef cpp_watarray.BitArray *thisptr
 *     def __cinit__(self, uint64_t size = 0):
 *         self.thisptr = new cpp_watarray.BitArray(size)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
  try {__pyx_t_1 = new wat_array::BitArray(__pyx_v_size);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_self->thisptr = __pyx_t_1;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("watarray.BitArray.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static void __pyx_pw_8watarray_8BitArray_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8watarray_8BitArray_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8watarray_8BitArray_2__dealloc__(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
}

/* "watarray.pyx":118
 *     def __cinit__(self, uint64_t size = 0):
 *         self.thisptr = new cpp_watarray.BitArray(size)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     def Init(self, uint64_t size):
 */

static void __pyx_pf_8watarray_8BitArray_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_8watarray_BitArray *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "watarray.pyx":119
 *         self.thisptr = new cpp_watarray.BitArray(size)
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *     def Init(self, uint64_t size):
 *         self.thisptr.Init(size)
 */
  delete __pyx_v_self->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_5Init(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_8watarray_8BitArray_4Init[] = "BitArray.Init(self, uint64_t size)";
static PyObject *__pyx_pw_8watarray_8BitArray_5Init(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  uint64_t __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Init (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_from_py_uint64_t(__pyx_arg_size); if (unlikely((__pyx_v_size == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.BitArray.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8BitArray_4Init(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), ((uint64_t)__pyx_v_size));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":120
 *     def __dealloc__(self):
 *         del self.thisptr
 *     def Init(self, uint64_t size):             # <<<<<<<<<<<<<<
 *         self.thisptr.Init(size)
 *     def Clear(self):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_4Init(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Init", 0);

  /* "watarray.pyx":121
 *         del self.thisptr
 *     def Init(self, uint64_t size):
 *         self.thisptr.Init(size)             # <<<<<<<<<<<<<<
 *     def Clear(self):
 *         self.thisptr.Clear()
 */
  try {__pyx_v_self->thisptr->Init(__pyx_v_size);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("watarray.BitArray.Init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_7Clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8watarray_8BitArray_6Clear[] = "BitArray.Clear(self)";
static PyObject *__pyx_pw_8watarray_8BitArray_7Clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Clear (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8BitArray_6Clear(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":122
 *     def Init(self, uint64_t size):
 *         self.thisptr.Init(size)
 *     def Clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.Clear()
 *     def length(self):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_6Clear(struct __pyx_obj_8watarray_BitArray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Clear", 0);

  /* "watarray.pyx":123
 *         self.thisptr.Init(size)
 *     def Clear(self):
 *         self.thisptr.Clear()             # <<<<<<<<<<<<<<
 *     def length(self):
 *         return self.thisptr.length()
 */
  try {__pyx_v_self->thisptr->Clear();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("watarray.BitArray.Clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_9length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8watarray_8BitArray_8length[] = "BitArray.length(self)";
static PyObject *__pyx_pw_8watarray_8BitArray_9length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("length (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8BitArray_8length(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":124
 *     def Clear(self):
 *         self.thisptr.Clear()
 *     def length(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.length()
 *     def one_num(self):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_8length(struct __pyx_obj_8watarray_BitArray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("length", 0);

  /* "watarray.pyx":125
 *         self.thisptr.Clear()
 *     def length(self):
 *         return self.thisptr.length()             # <<<<<<<<<<<<<<
 *     def one_num(self):
 *         return self.thisptr.one_num()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->length()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.BitArray.length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_11one_num(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8watarray_8BitArray_10one_num[] = "BitArray.one_num(self)";
static PyObject *__pyx_pw_8watarray_8BitArray_11one_num(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("one_num (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8BitArray_10one_num(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":126
 *     def length(self):
 *         return self.thisptr.length()
 *     def one_num(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.one_num()
 *     def SetBit(self, uint64_t bit, uint64_t pos):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_10one_num(struct __pyx_obj_8watarray_BitArray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("one_num", 0);

  /* "watarray.pyx":127
 *         return self.thisptr.length()
 *     def one_num(self):
 *         return self.thisptr.one_num()             # <<<<<<<<<<<<<<
 *     def SetBit(self, uint64_t bit, uint64_t pos):
 *         self.thisptr.SetBit(bit, pos)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->one_num()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.BitArray.one_num", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_13SetBit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8BitArray_12SetBit[] = "BitArray.SetBit(self, uint64_t bit, uint64_t pos)";
static PyObject *__pyx_pw_8watarray_8BitArray_13SetBit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_bit;
  uint64_t __pyx_v_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetBit (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__bit,&__pyx_n_s__pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bit)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SetBit", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SetBit") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bit = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_bit == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pos = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetBit", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.BitArray.SetBit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8BitArray_12SetBit(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), __pyx_v_bit, __pyx_v_pos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":128
 *     def one_num(self):
 *         return self.thisptr.one_num()
 *     def SetBit(self, uint64_t bit, uint64_t pos):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetBit(bit, pos)
 *     def Build(self):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_12SetBit(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_bit, uint64_t __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetBit", 0);

  /* "watarray.pyx":129
 *         return self.thisptr.one_num()
 *     def SetBit(self, uint64_t bit, uint64_t pos):
 *         self.thisptr.SetBit(bit, pos)             # <<<<<<<<<<<<<<
 *     def Build(self):
 *         self.thisptr.Build()
 */
  __pyx_v_self->thisptr->SetBit(__pyx_v_bit, __pyx_v_pos);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_15Build(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8watarray_8BitArray_14Build[] = "BitArray.Build(self)";
static PyObject *__pyx_pw_8watarray_8BitArray_15Build(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Build (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8BitArray_14Build(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":130
 *     def SetBit(self, uint64_t bit, uint64_t pos):
 *         self.thisptr.SetBit(bit, pos)
 *     def Build(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.Build()
 *     def Rank(self, uint64_t bit, uint64_t pos):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_14Build(struct __pyx_obj_8watarray_BitArray *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Build", 0);

  /* "watarray.pyx":131
 *         self.thisptr.SetBit(bit, pos)
 *     def Build(self):
 *         self.thisptr.Build()             # <<<<<<<<<<<<<<
 *     def Rank(self, uint64_t bit, uint64_t pos):
 *         return self.thisptr.Rank(bit, pos)
 */
  __pyx_v_self->thisptr->Build();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_17Rank(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8BitArray_16Rank[] = "BitArray.Rank(self, uint64_t bit, uint64_t pos)";
static PyObject *__pyx_pw_8watarray_8BitArray_17Rank(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_bit;
  uint64_t __pyx_v_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Rank (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__bit,&__pyx_n_s__pos,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bit)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__pos)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Rank", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Rank") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bit = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_bit == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_pos = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Rank", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.BitArray.Rank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8BitArray_16Rank(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), __pyx_v_bit, __pyx_v_pos);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":132
 *     def Build(self):
 *         self.thisptr.Build()
 *     def Rank(self, uint64_t bit, uint64_t pos):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Rank(bit, pos)
 *     def Select(self, uint64_t bit, uint64_t rank):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_16Rank(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_bit, uint64_t __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Rank", 0);

  /* "watarray.pyx":133
 *         self.thisptr.Build()
 *     def Rank(self, uint64_t bit, uint64_t pos):
 *         return self.thisptr.Rank(bit, pos)             # <<<<<<<<<<<<<<
 *     def Select(self, uint64_t bit, uint64_t rank):
 *         return self.thisptr.Select(bit, rank)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->Rank(__pyx_v_bit, __pyx_v_pos)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.BitArray.Rank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_19Select(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8BitArray_18Select[] = "BitArray.Select(self, uint64_t bit, uint64_t rank)";
static PyObject *__pyx_pw_8watarray_8BitArray_19Select(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_bit;
  uint64_t __pyx_v_rank;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Select (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__bit,&__pyx_n_s__rank,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bit)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rank)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("Select", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "Select") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_bit = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_bit == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rank = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_rank == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("Select", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.BitArray.Select", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8BitArray_18Select(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), __pyx_v_bit, __pyx_v_rank);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":134
 *     def Rank(self, uint64_t bit, uint64_t pos):
 *         return self.thisptr.Rank(bit, pos)
 *     def Select(self, uint64_t bit, uint64_t rank):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Select(bit, rank)
 *     def Lookup(self, uint64_t pos):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_18Select(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_bit, uint64_t __pyx_v_rank) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Select", 0);

  /* "watarray.pyx":135
 *         return self.thisptr.Rank(bit, pos)
 *     def Select(self, uint64_t bit, uint64_t rank):
 *         return self.thisptr.Select(bit, rank)             # <<<<<<<<<<<<<<
 *     def Lookup(self, uint64_t pos):
 *         return self.thisptr.Lookup(pos)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->Select(__pyx_v_bit, __pyx_v_rank)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.BitArray.Select", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_21Lookup(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos); /*proto*/
static char __pyx_doc_8watarray_8BitArray_20Lookup[] = "BitArray.Lookup(self, uint64_t pos)";
static PyObject *__pyx_pw_8watarray_8BitArray_21Lookup(PyObject *__pyx_v_self, PyObject *__pyx_arg_pos) {
  uint64_t __pyx_v_pos;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Lookup (wrapper)", 0);
  assert(__pyx_arg_pos); {
    __pyx_v_pos = __Pyx_PyInt_from_py_uint64_t(__pyx_arg_pos); if (unlikely((__pyx_v_pos == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.BitArray.Lookup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8BitArray_20Lookup(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), ((uint64_t)__pyx_v_pos));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":136
 *     def Select(self, uint64_t bit, uint64_t rank):
 *         return self.thisptr.Select(bit, rank)
 *     def Lookup(self, uint64_t pos):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Lookup(pos)
 *     def PopCount(self, uint64_t x):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_20Lookup(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_pos) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Lookup", 0);

  /* "watarray.pyx":137
 *         return self.thisptr.Select(bit, rank)
 *     def Lookup(self, uint64_t pos):
 *         return self.thisptr.Lookup(pos)             # <<<<<<<<<<<<<<
 *     def PopCount(self, uint64_t x):
 *         return self.thisptr.PopCount(x)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->Lookup(__pyx_v_pos)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.BitArray.Lookup", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_23PopCount(PyObject *__pyx_v_self, PyObject *__pyx_arg_x); /*proto*/
static char __pyx_doc_8watarray_8BitArray_22PopCount[] = "BitArray.PopCount(self, uint64_t x)";
static PyObject *__pyx_pw_8watarray_8BitArray_23PopCount(PyObject *__pyx_v_self, PyObject *__pyx_arg_x) {
  uint64_t __pyx_v_x;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PopCount (wrapper)", 0);
  assert(__pyx_arg_x); {
    __pyx_v_x = __Pyx_PyInt_from_py_uint64_t(__pyx_arg_x); if (unlikely((__pyx_v_x == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.BitArray.PopCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8BitArray_22PopCount(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), ((uint64_t)__pyx_v_x));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":138
 *     def Lookup(self, uint64_t pos):
 *         return self.thisptr.Lookup(pos)
 *     def PopCount(self, uint64_t x):             # <<<<<<<<<<<<<<
 *         return self.thisptr.PopCount(x)
 *     def PopCountMask(self, uint64_t x, uint64_t offset):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_22PopCount(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PopCount", 0);

  /* "watarray.pyx":139
 *         return self.thisptr.Lookup(pos)
 *     def PopCount(self, uint64_t x):
 *         return self.thisptr.PopCount(x)             # <<<<<<<<<<<<<<
 *     def PopCountMask(self, uint64_t x, uint64_t offset):
 *         return self.thisptr.PopCountMask(x, offset)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->PopCount(__pyx_v_x)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.BitArray.PopCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_25PopCountMask(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8BitArray_24PopCountMask[] = "BitArray.PopCountMask(self, uint64_t x, uint64_t offset)";
static PyObject *__pyx_pw_8watarray_8BitArray_25PopCountMask(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_x;
  uint64_t __pyx_v_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("PopCountMask (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__offset,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__offset)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("PopCountMask", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "PopCountMask") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_x == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_offset = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_offset == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("PopCountMask", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.BitArray.PopCountMask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8BitArray_24PopCountMask(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), __pyx_v_x, __pyx_v_offset);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":140
 *     def PopCount(self, uint64_t x):
 *         return self.thisptr.PopCount(x)
 *     def PopCountMask(self, uint64_t x, uint64_t offset):             # <<<<<<<<<<<<<<
 *         return self.thisptr.PopCountMask(x, offset)
 *     def SelectInBlock(self, uint64_t x, uint64_t rank):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_24PopCountMask(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_x, uint64_t __pyx_v_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PopCountMask", 0);

  /* "watarray.pyx":141
 *         return self.thisptr.PopCount(x)
 *     def PopCountMask(self, uint64_t x, uint64_t offset):
 *         return self.thisptr.PopCountMask(x, offset)             # <<<<<<<<<<<<<<
 *     def SelectInBlock(self, uint64_t x, uint64_t rank):
 *         return self.thisptr.SelectInBlock(x, rank)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->PopCountMask(__pyx_v_x, __pyx_v_offset)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.BitArray.PopCountMask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_27SelectInBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8BitArray_26SelectInBlock[] = "BitArray.SelectInBlock(self, uint64_t x, uint64_t rank)";
static PyObject *__pyx_pw_8watarray_8BitArray_27SelectInBlock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_x;
  uint64_t __pyx_v_rank;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SelectInBlock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__rank,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rank)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SelectInBlock", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SelectInBlock") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_x == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rank = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_rank == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SelectInBlock", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.BitArray.SelectInBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8BitArray_26SelectInBlock(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), __pyx_v_x, __pyx_v_rank);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":142
 *     def PopCountMask(self, uint64_t x, uint64_t offset):
 *         return self.thisptr.PopCountMask(x, offset)
 *     def SelectInBlock(self, uint64_t x, uint64_t rank):             # <<<<<<<<<<<<<<
 *         return self.thisptr.SelectInBlock(x, rank)
 *     def GetBitNum(self, uint64_t one_num, uint64_t num, uint64_t bit):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_26SelectInBlock(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_x, uint64_t __pyx_v_rank) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SelectInBlock", 0);

  /* "watarray.pyx":143
 *         return self.thisptr.PopCountMask(x, offset)
 *     def SelectInBlock(self, uint64_t x, uint64_t rank):
 *         return self.thisptr.SelectInBlock(x, rank)             # <<<<<<<<<<<<<<
 *     def GetBitNum(self, uint64_t one_num, uint64_t num, uint64_t bit):
 *         return self.thisptr.GetBitNum(one_num, num, bit)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->SelectInBlock(__pyx_v_x, __pyx_v_rank)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.BitArray.SelectInBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_29GetBitNum(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8watarray_8BitArray_28GetBitNum[] = "BitArray.GetBitNum(self, uint64_t one_num, uint64_t num, uint64_t bit)";
static PyObject *__pyx_pw_8watarray_8BitArray_29GetBitNum(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint64_t __pyx_v_one_num;
  uint64_t __pyx_v_num;
  uint64_t __pyx_v_bit;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetBitNum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__one_num,&__pyx_n_s__num,&__pyx_n_s__bit,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__one_num)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("GetBitNum", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("GetBitNum", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "GetBitNum") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_one_num = __Pyx_PyInt_from_py_uint64_t(values[0]); if (unlikely((__pyx_v_one_num == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_num = __Pyx_PyInt_from_py_uint64_t(values[1]); if (unlikely((__pyx_v_num == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_bit = __Pyx_PyInt_from_py_uint64_t(values[2]); if (unlikely((__pyx_v_bit == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetBitNum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("watarray.BitArray.GetBitNum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8watarray_8BitArray_28GetBitNum(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), __pyx_v_one_num, __pyx_v_num, __pyx_v_bit);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":144
 *     def SelectInBlock(self, uint64_t x, uint64_t rank):
 *         return self.thisptr.SelectInBlock(x, rank)
 *     def GetBitNum(self, uint64_t one_num, uint64_t num, uint64_t bit):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetBitNum(one_num, num, bit)
 *     def dump(self, filename):
 */

static PyObject *__pyx_pf_8watarray_8BitArray_28GetBitNum(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, uint64_t __pyx_v_one_num, uint64_t __pyx_v_num, uint64_t __pyx_v_bit) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetBitNum", 0);

  /* "watarray.pyx":145
 *         return self.thisptr.SelectInBlock(x, rank)
 *     def GetBitNum(self, uint64_t one_num, uint64_t num, uint64_t bit):
 *         return self.thisptr.GetBitNum(one_num, num, bit)             # <<<<<<<<<<<<<<
 *     def dump(self, filename):
 *         if isinstance(filename, unicode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(__pyx_v_self->thisptr->GetBitNum(__pyx_v_one_num, __pyx_v_num, __pyx_v_bit)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.BitArray.GetBitNum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_31dump(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_8watarray_8BitArray_30dump[] = "BitArray.dump(self, filename)";
static PyObject *__pyx_pw_8watarray_8BitArray_31dump(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8BitArray_30dump(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), ((PyObject *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":146
 *     def GetBitNum(self, uint64_t one_num, uint64_t num, uint64_t bit):
 *         return self.thisptr.GetBitNum(one_num, num, bit)
 *     def dump(self, filename):             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')
 */

static PyObject *__pyx_pf_8watarray_8BitArray_30dump(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "watarray.pyx":147
 *         return self.thisptr.GetBitNum(one_num, num, bit)
 *     def dump(self, filename):
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = filename.encode('utf-8')
 *         dump(self.thisptr, <char *>filename)
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyUnicode_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_filename, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "watarray.pyx":148
 *     def dump(self, filename):
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *         dump(self.thisptr, <char *>filename)
 *     def load(self, filename):
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_filename, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_filename);
    __pyx_v_filename = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "watarray.pyx":149
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')
 *         dump(self.thisptr, <char *>filename)             # <<<<<<<<<<<<<<
 *     def load(self, filename):
 *         if isinstance(filename, unicode):
 */
  __pyx_t_4 = PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {cpp_watarray::dump(__pyx_v_self->thisptr, ((char *)__pyx_t_4));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("watarray.BitArray.dump", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_33load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_8watarray_8BitArray_32load[] = "BitArray.load(self, filename)";
static PyObject *__pyx_pw_8watarray_8BitArray_33load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8BitArray_32load(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), ((PyObject *)__pyx_v_filename));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":150
 *             filename = filename.encode('utf-8')
 *         dump(self.thisptr, <char *>filename)
 *     def load(self, filename):             # <<<<<<<<<<<<<<
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')
 */

static PyObject *__pyx_pf_8watarray_8BitArray_32load(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  __Pyx_INCREF(__pyx_v_filename);

  /* "watarray.pyx":151
 *         dump(self.thisptr, <char *>filename)
 *     def load(self, filename):
 *         if isinstance(filename, unicode):             # <<<<<<<<<<<<<<
 *             filename = filename.encode('utf-8')
 *         load(self.thisptr, <char *>filename)
 */
  __pyx_t_1 = ((PyObject *)((PyObject*)(&PyUnicode_Type)));
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_filename, __pyx_t_1); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "watarray.pyx":152
 *     def load(self, filename):
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *         load(self.thisptr, <char *>filename)
 *     def dumps(self):
 */
    __pyx_t_1 = PyObject_GetAttr(__pyx_v_filename, __pyx_n_s__encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_5), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_filename);
    __pyx_v_filename = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "watarray.pyx":153
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')
 *         load(self.thisptr, <char *>filename)             # <<<<<<<<<<<<<<
 *     def dumps(self):
 *         cdef string str
 */
  __pyx_t_4 = PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {cpp_watarray::load(__pyx_v_self->thisptr, ((char *)__pyx_t_4));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("watarray.BitArray.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_35dumps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8watarray_8BitArray_34dumps[] = "BitArray.dumps(self)";
static PyObject *__pyx_pw_8watarray_8BitArray_35dumps(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dumps (wrapper)", 0);
  __pyx_r = __pyx_pf_8watarray_8BitArray_34dumps(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":154
 *             filename = filename.encode('utf-8')
 *         load(self.thisptr, <char *>filename)
 *     def dumps(self):             # <<<<<<<<<<<<<<
 *         cdef string str
 *         dumps(self.thisptr, str)
 */

static PyObject *__pyx_pf_8watarray_8BitArray_34dumps(struct __pyx_obj_8watarray_BitArray *__pyx_v_self) {
  std::string __pyx_v_str;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dumps", 0);

  /* "watarray.pyx":156
 *     def dumps(self):
 *         cdef string str
 *         dumps(self.thisptr, str)             # <<<<<<<<<<<<<<
 *         cdef bytes data
 *         data = str.c_str()[:str.size()] # libcpp.string.data is not implemented
 */
  try {cpp_watarray::dumps(__pyx_v_self->thisptr, __pyx_v_str);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  /* "watarray.pyx":158
 *         dumps(self.thisptr, str)
 *         cdef bytes data
 *         data = str.c_str()[:str.size()] # libcpp.string.data is not implemented             # <<<<<<<<<<<<<<
 *         return data
 *     def loads(self, bytes data):
 */
  __pyx_t_1 = PyBytes_FromStringAndSize(((const char*)__pyx_v_str.c_str()) + 0, __pyx_v_str.size() - 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "watarray.pyx":159
 *         cdef bytes data
 *         data = str.c_str()[:str.size()] # libcpp.string.data is not implemented
 *         return data             # <<<<<<<<<<<<<<
 *     def loads(self, bytes data):
 *         cdef string str = string(data, len(data))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  __pyx_r = ((PyObject *)__pyx_v_data);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("watarray.BitArray.dumps", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_8watarray_8BitArray_37loads(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static char __pyx_doc_8watarray_8BitArray_36loads[] = "BitArray.loads(self, bytes data)";
static PyObject *__pyx_pw_8watarray_8BitArray_37loads(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loads (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), (&PyBytes_Type), 1, "data", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_8watarray_8BitArray_36loads(((struct __pyx_obj_8watarray_BitArray *)__pyx_v_self), ((PyObject*)__pyx_v_data));
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "watarray.pyx":160
 *         data = str.c_str()[:str.size()] # libcpp.string.data is not implemented
 *         return data
 *     def loads(self, bytes data):             # <<<<<<<<<<<<<<
 *         cdef string str = string(data, len(data))
 *         loads(self.thisptr, str)
 */

static PyObject *__pyx_pf_8watarray_8BitArray_36loads(struct __pyx_obj_8watarray_BitArray *__pyx_v_self, PyObject *__pyx_v_data) {
  std::string __pyx_v_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loads", 0);

  /* "watarray.pyx":161
 *         return data
 *     def loads(self, bytes data):
 *         cdef string str = string(data, len(data))             # <<<<<<<<<<<<<<
 *         loads(self.thisptr, str)
 * 
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_data)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((PyObject *)__pyx_v_data) == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = PyBytes_GET_SIZE(((PyObject *)__pyx_v_data)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {__pyx_t_3 = std::string(__pyx_t_1, __pyx_t_2);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_str = __pyx_t_3;

  /* "watarray.pyx":162
 *     def loads(self, bytes data):
 *         cdef string str = string(data, len(data))
 *         loads(self.thisptr, str)             # <<<<<<<<<<<<<<
 * 
 * __version__ = '0.6dev'
 */
  try {cpp_watarray::loads(__pyx_v_self->thisptr, __pyx_v_str);} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("watarray.BitArray.loads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_8watarray_WatArray __pyx_vtable_8watarray_WatArray;

static PyObject *__pyx_tp_new_8watarray_WatArray(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8watarray_WatArray *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_8watarray_WatArray *)o);
  p->__pyx_vtab = __pyx_vtabptr_8watarray_WatArray;
  if (__pyx_pw_8watarray_8WatArray_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8watarray_WatArray(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8watarray_8WatArray_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8watarray_WatArray[] = {
  {__Pyx_NAMESTR("Init"), (PyCFunction)__pyx_pw_8watarray_8WatArray_5Init, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_4Init)},
  {__Pyx_NAMESTR("Clear"), (PyCFunction)__pyx_pw_8watarray_8WatArray_7Clear, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_6Clear)},
  {__Pyx_NAMESTR("Lookup"), (PyCFunction)__pyx_pw_8watarray_8WatArray_9Lookup, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_8Lookup)},
  {__Pyx_NAMESTR("Rank"), (PyCFunction)__pyx_pw_8watarray_8WatArray_11Rank, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_10Rank)},
  {__Pyx_NAMESTR("Select"), (PyCFunction)__pyx_pw_8watarray_8WatArray_13Select, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_12Select)},
  {__Pyx_NAMESTR("RankLessThan"), (PyCFunction)__pyx_pw_8watarray_8WatArray_15RankLessThan, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_14RankLessThan)},
  {__Pyx_NAMESTR("RankMoreThan"), (PyCFunction)__pyx_pw_8watarray_8WatArray_17RankMoreThan, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_16RankMoreThan)},
  {__Pyx_NAMESTR("RankAll"), (PyCFunction)__pyx_pw_8watarray_8WatArray_19RankAll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_18RankAll)},
  {__Pyx_NAMESTR("FreqRange"), (PyCFunction)__pyx_pw_8watarray_8WatArray_21FreqRange, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_20FreqRange)},
  {__Pyx_NAMESTR("MaxRange"), (PyCFunction)__pyx_pw_8watarray_8WatArray_23MaxRange, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_22MaxRange)},
  {__Pyx_NAMESTR("MinRange"), (PyCFunction)__pyx_pw_8watarray_8WatArray_25MinRange, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_24MinRange)},
  {__Pyx_NAMESTR("QuantileRange"), (PyCFunction)__pyx_pw_8watarray_8WatArray_27QuantileRange, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_26QuantileRange)},
  {__Pyx_NAMESTR("ListModeRange"), (PyCFunction)__pyx_pw_8watarray_8WatArray_29ListModeRange, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_28ListModeRange)},
  {__Pyx_NAMESTR("ListMinRange"), (PyCFunction)__pyx_pw_8watarray_8WatArray_31ListMinRange, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_30ListMinRange)},
  {__Pyx_NAMESTR("ListMaxRange"), (PyCFunction)__pyx_pw_8watarray_8WatArray_33ListMaxRange, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_32ListMaxRange)},
  {__Pyx_NAMESTR("Freq"), (PyCFunction)__pyx_pw_8watarray_8WatArray_35Freq, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_34Freq)},
  {__Pyx_NAMESTR("FreqSum"), (PyCFunction)__pyx_pw_8watarray_8WatArray_37FreqSum, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_36FreqSum)},
  {__Pyx_NAMESTR("alphabet_num"), (PyCFunction)__pyx_pw_8watarray_8WatArray_39alphabet_num, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_38alphabet_num)},
  {__Pyx_NAMESTR("length"), (PyCFunction)__pyx_pw_8watarray_8WatArray_41length, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_40length)},
  {__Pyx_NAMESTR("dump"), (PyCFunction)__pyx_pw_8watarray_8WatArray_43dump, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_42dump)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_8watarray_8WatArray_45load, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_44load)},
  {__Pyx_NAMESTR("dumps"), (PyCFunction)__pyx_pw_8watarray_8WatArray_47dumps, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_46dumps)},
  {__Pyx_NAMESTR("loads"), (PyCFunction)__pyx_pw_8watarray_8WatArray_49loads, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8WatArray_48loads)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_WatArray = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_WatArray = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_WatArray = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_WatArray = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_8watarray_WatArray = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("watarray.WatArray"), /*tp_name*/
  sizeof(struct __pyx_obj_8watarray_WatArray), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8watarray_WatArray, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_WatArray, /*tp_as_number*/
  &__pyx_tp_as_sequence_WatArray, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_WatArray, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_WatArray, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8watarray_WatArray, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8watarray_WatArray, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_8watarray_BitArray(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  if (__pyx_pw_8watarray_8BitArray_1__cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8watarray_BitArray(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8watarray_8BitArray_3__dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8watarray_BitArray[] = {
  {__Pyx_NAMESTR("Init"), (PyCFunction)__pyx_pw_8watarray_8BitArray_5Init, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_4Init)},
  {__Pyx_NAMESTR("Clear"), (PyCFunction)__pyx_pw_8watarray_8BitArray_7Clear, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_6Clear)},
  {__Pyx_NAMESTR("length"), (PyCFunction)__pyx_pw_8watarray_8BitArray_9length, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_8length)},
  {__Pyx_NAMESTR("one_num"), (PyCFunction)__pyx_pw_8watarray_8BitArray_11one_num, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_10one_num)},
  {__Pyx_NAMESTR("SetBit"), (PyCFunction)__pyx_pw_8watarray_8BitArray_13SetBit, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_12SetBit)},
  {__Pyx_NAMESTR("Build"), (PyCFunction)__pyx_pw_8watarray_8BitArray_15Build, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_14Build)},
  {__Pyx_NAMESTR("Rank"), (PyCFunction)__pyx_pw_8watarray_8BitArray_17Rank, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_16Rank)},
  {__Pyx_NAMESTR("Select"), (PyCFunction)__pyx_pw_8watarray_8BitArray_19Select, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_18Select)},
  {__Pyx_NAMESTR("Lookup"), (PyCFunction)__pyx_pw_8watarray_8BitArray_21Lookup, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_20Lookup)},
  {__Pyx_NAMESTR("PopCount"), (PyCFunction)__pyx_pw_8watarray_8BitArray_23PopCount, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_22PopCount)},
  {__Pyx_NAMESTR("PopCountMask"), (PyCFunction)__pyx_pw_8watarray_8BitArray_25PopCountMask, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_24PopCountMask)},
  {__Pyx_NAMESTR("SelectInBlock"), (PyCFunction)__pyx_pw_8watarray_8BitArray_27SelectInBlock, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_26SelectInBlock)},
  {__Pyx_NAMESTR("GetBitNum"), (PyCFunction)__pyx_pw_8watarray_8BitArray_29GetBitNum, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_28GetBitNum)},
  {__Pyx_NAMESTR("dump"), (PyCFunction)__pyx_pw_8watarray_8BitArray_31dump, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_30dump)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_8watarray_8BitArray_33load, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_32load)},
  {__Pyx_NAMESTR("dumps"), (PyCFunction)__pyx_pw_8watarray_8BitArray_35dumps, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_34dumps)},
  {__Pyx_NAMESTR("loads"), (PyCFunction)__pyx_pw_8watarray_8BitArray_37loads, METH_O, __Pyx_DOCSTR(__pyx_doc_8watarray_8BitArray_36loads)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_BitArray = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_BitArray = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BitArray = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_BitArray = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_8watarray_BitArray = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("watarray.BitArray"), /*tp_name*/
  sizeof(struct __pyx_obj_8watarray_BitArray), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8watarray_BitArray, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_BitArray, /*tp_as_number*/
  &__pyx_tp_as_sequence_BitArray, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BitArray, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_BitArray, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8watarray_BitArray, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8watarray_BitArray, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("watarray"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_n_s__MemoryError, __pyx_k__MemoryError, sizeof(__pyx_k__MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s__NOTFOUND, __pyx_k__NOTFOUND, sizeof(__pyx_k__NOTFOUND), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s____version__, __pyx_k____version__, sizeof(__pyx_k____version__), 0, 0, 1, 1},
  {&__pyx_n_s__alphabet_num, __pyx_k__alphabet_num, sizeof(__pyx_k__alphabet_num), 0, 0, 1, 1},
  {&__pyx_n_s__beg_pos, __pyx_k__beg_pos, sizeof(__pyx_k__beg_pos), 0, 0, 1, 1},
  {&__pyx_n_s__bit, __pyx_k__bit, sizeof(__pyx_k__bit), 0, 0, 1, 1},
  {&__pyx_n_s__c, __pyx_k__c, sizeof(__pyx_k__c), 0, 0, 1, 1},
  {&__pyx_n_s__encode, __pyx_k__encode, sizeof(__pyx_k__encode), 0, 0, 1, 1},
  {&__pyx_n_s__end_pos, __pyx_k__end_pos, sizeof(__pyx_k__end_pos), 0, 0, 1, 1},
  {&__pyx_n_s__iterable, __pyx_k__iterable, sizeof(__pyx_k__iterable), 0, 0, 1, 1},
  {&__pyx_n_s__k, __pyx_k__k, sizeof(__pyx_k__k), 0, 0, 1, 1},
  {&__pyx_n_s__max_c, __pyx_k__max_c, sizeof(__pyx_k__max_c), 0, 0, 1, 1},
  {&__pyx_n_s__min_c, __pyx_k__min_c, sizeof(__pyx_k__min_c), 0, 0, 1, 1},
  {&__pyx_n_s__num, __pyx_k__num, sizeof(__pyx_k__num), 0, 0, 1, 1},
  {&__pyx_n_s__offset, __pyx_k__offset, sizeof(__pyx_k__offset), 0, 0, 1, 1},
  {&__pyx_n_s__one_num, __pyx_k__one_num, sizeof(__pyx_k__one_num), 0, 0, 1, 1},
  {&__pyx_n_s__pos, __pyx_k__pos, sizeof(__pyx_k__pos), 0, 0, 1, 1},
  {&__pyx_n_s__rank, __pyx_k__rank, sizeof(__pyx_k__rank), 0, 0, 1, 1},
  {&__pyx_n_s__size, __pyx_k__size, sizeof(__pyx_k__size), 0, 0, 1, 1},
  {&__pyx_n_s__x, __pyx_k__x, sizeof(__pyx_k__x), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_MemoryError = __Pyx_GetName(__pyx_b, __pyx_n_s__MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "watarray.pyx":97
 *     def dump(self, filename):
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *         dump(self.thisptr, <char *>filename)
 *     def load(self, filename):
 */
  __pyx_k_tuple_2 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_2);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_2, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_2));

  /* "watarray.pyx":101
 *     def load(self, filename):
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *         load(self.thisptr, <char *>filename)
 *     def dumps(self):
 */
  __pyx_k_tuple_3 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_3);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_3));

  /* "watarray.pyx":148
 *     def dump(self, filename):
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *         dump(self.thisptr, <char *>filename)
 *     def load(self, filename):
 */
  __pyx_k_tuple_4 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_4);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_4, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "watarray.pyx":152
 *     def load(self, filename):
 *         if isinstance(filename, unicode):
 *             filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *         load(self.thisptr, <char *>filename)
 *     def dumps(self):
 */
  __pyx_k_tuple_5 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_k_tuple_5);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_1));
  PyTuple_SET_ITEM(__pyx_k_tuple_5, 0, ((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initwatarray(void); /*proto*/
PyMODINIT_FUNC initwatarray(void)
#else
PyMODINIT_FUNC PyInit_watarray(void); /*proto*/
PyMODINIT_FUNC PyInit_watarray(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_watarray(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("watarray"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_watarray) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_8watarray_WatArray = &__pyx_vtable_8watarray_WatArray;
  __pyx_vtable_8watarray_WatArray._Init = (PyObject *(*)(struct __pyx_obj_8watarray_WatArray *, PyObject *))__pyx_f_8watarray_8WatArray__Init;
  __pyx_vtable_8watarray_WatArray._ListRange = (PyObject *(*)(struct __pyx_obj_8watarray_WatArray *, std::vector<wat_array::ListResult> &))__pyx_f_8watarray_8WatArray__ListRange;
  if (PyType_Ready(&__pyx_type_8watarray_WatArray) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8watarray_WatArray.tp_dict, __pyx_vtabptr_8watarray_WatArray) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "WatArray", (PyObject *)&__pyx_type_8watarray_WatArray) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8watarray_WatArray = &__pyx_type_8watarray_WatArray;
  if (PyType_Ready(&__pyx_type_8watarray_BitArray) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "BitArray", (PyObject *)&__pyx_type_8watarray_BitArray) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8watarray_BitArray = &__pyx_type_8watarray_BitArray;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "watarray.pyx":12
 * from cpp_watarray cimport ListResult, dump, load, dumps, loads
 * 
 * NOTFOUND = <uint64_t> cpp_watarray.NOTFOUND             # <<<<<<<<<<<<<<
 * 
 * cdef class WatArray:
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_uint64_t(((uint64_t)wat_array::NOTFOUND)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__NOTFOUND, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "watarray.pyx":164
 *         loads(self.thisptr, str)
 * 
 * __version__ = '0.6dev'             # <<<<<<<<<<<<<<
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____version__, ((PyObject *)__pyx_kp_s_6)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "watarray.pyx":1
 * #cython: embedsignature=True             # <<<<<<<<<<<<<<
 * from cython cimport address
 * from cython.operator import dereference, preincrement
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init watarray", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init watarray");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_uint64_t(uint64_t val) {
    const uint64_t neg_one = (uint64_t)-1, const_zero = (uint64_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(uint64_t) == sizeof(char))  ||
        (sizeof(uint64_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(uint64_t) == sizeof(int)) ||
               (sizeof(uint64_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(uint64_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE uint64_t __Pyx_PyInt_from_py_uint64_t(PyObject* x) {
    const uint64_t neg_one = (uint64_t)-1, const_zero = (uint64_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(uint64_t) == sizeof(char)) {
        if (is_unsigned)
            return (uint64_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (uint64_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(uint64_t) == sizeof(short)) {
        if (is_unsigned)
            return (uint64_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (uint64_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(uint64_t) == sizeof(int)) {
        if (is_unsigned)
            return (uint64_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (uint64_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(uint64_t) == sizeof(long)) {
        if (is_unsigned)
            return (uint64_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (uint64_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(uint64_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (uint64_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (uint64_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        uint64_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (uint64_t)-1;
    }
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}


/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
